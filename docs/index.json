{"repository_name":"conveyor","body":"# conveyor\n\nConveyor is a Crystal background-job framework, allowing you to offload work to other processes. This is useful for things like sending emails in web applications to avoid blocking the response while guaranteeing that the email is sent.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     conveyor:\n       github: jgaskins/conveyor\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nIn your Conveyor configuration file (for example, in `src/config/conveyor.cr`):\n\n```crystal\nrequire \"conveyor\"\nrequire \"redis\"\n\nConveyor.configure do |c|\n  # The Redis client to use to store and retrieve your Conveyor jobs. Can also\n  # be specified via the `REDIS_URL` env var. Either this option or the env var\n  # must be provided.\n  c.redis = Redis::Client.new(URI.parse(\"redis:///?max_idle_pool_size=10\"))\n\n  # How many concurrent workers the Conveyor orchestrator should start. Can be\n  # set via CONVEYOR_CONCURRENCY env var, defaults to 10.\n  c.concurrency = 10\n\n  # Set your queues in priority order, defaults to the CONVEYOR_QUEUES env var\n  # holding comma-separated queue names. If that is unspecified, it only\n  # consumes the \"default\" queue.\n  c.queues = %w[critical high default low]\nend\n```\n\n### Enqueuing jobs\n\nJobs are `struct`s that inherit `Conveyor::Job` with a `call` method. All instance variables of a job must be serializable back and forth to JSON.\n\n```crystal\nstruct ExampleJob < Conveyor::Job\n  def initialize(@name : String)\n  end\n\n  def call\n    # Do some work\n  end\nend\n```\n\nTo enqueue this job, call `enqueue` on an instance of it:\n\n```crystal\nExampleJob.new(name: \"Foo\").enqueue\n```\n\n### Scheduling jobs\n\nTo schedule the job to run at a later time, you can specify `in` or `at` arguments:\n\n```crystal\nExampleJob.new(name: \"Time::Span\").schedule in: 1.minute\nExampleJob.new(name: \"Time\").schedule at: 5.minutes.from_now\n```\n\n### Recurring jobs\n\nRecurring jobs can be scheduled on the orchestrator:\n\n```crystal\nstruct MyDailyJob < Conveyor::Job\n  def call\n    # ...\n  end\nend\n\nConveyor.orchestrator.schedule do |schedule|\n  schedule.daily MyDailyJob.new, at: \"06:15\", in: Time::Location::UTC\n  schedule.every 30.seconds, Poll\nend\n```\n\nMultiple instances of your workers will coordinate so you won't get multiple instances of each one.\n\n## Setting queue\n\nTo set a job's default queue, define a `queue` method on it. If you don't specify one, it will be `\"default\"`.\n\n```crystal\nstruct ExampleJob < Conveyor::Job\n  # ...\n\n  def queue\n    \"low\"\n  end\nend\n```\n\nTo enqueue a specific job on a different queue from the one its type defaults to (for example, to give specific invocations higher priority), you can pass a `queue` argument to `enqueue`:\n\n```crystal\nExampleJob.new(name: \"Foo\").enqueue queue: \"high\"\n```\n\n### Processing jobs\n\nIn some job processors written in languages like Ruby that can load code at runtime, you might run a CLI provided by the framework to process jobs. Since Crystal doesn't allow runtime code loading, you need to write that yourself:\n\n```crystal\nrequire \"./config/conveyor\"\nrequire \"./jobs/**\"\n\n# Make sure you set up the orchestrator to shut down cleanly when your shutdown\n# criteria are met. In this example, we're using TERM and INT signals to notify\n# the background job workers to shut down.\n[\n  Signal::TERM,\n  Signal::INT,\n].each &.trap { Conveyor.orchestrator.stop }\n\nConveyor.orchestrator.start\n```\n\n## Development\n\nidk i'm still figuring this out tbh\n\n## Contributing\n\n1. Fork it (<https://github.com/jgaskins/conveyor/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Jamie Gaskins](https://github.com/jgaskins) - creator and maintainer\n","program":{"html_id":"conveyor/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"conveyor","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"conveyor/Conveyor","path":"Conveyor.html","kind":"module","full_name":"Conveyor","name":"Conveyor","abstract":false,"locations":[{"filename":"src/belt.cr","line_number":6,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L6"},{"filename":"src/configuration.cr","line_number":1,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L1"},{"filename":"src/conveyor.cr","line_number":9,"url":"https://github.com/jgaskins/conveyor/blob/main/src/conveyor.cr#L9"},{"filename":"src/errors.cr","line_number":1,"url":"https://github.com/jgaskins/conveyor/blob/main/src/errors.cr#L1"},{"filename":"src/job.cr","line_number":5,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L5"},{"filename":"src/job_data.cr","line_number":4,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L4"},{"filename":"src/orchestrator.cr","line_number":5,"url":"https://github.com/jgaskins/conveyor/blob/main/src/orchestrator.cr#L5"},{"filename":"src/scheduler.cr","line_number":3,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L3"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CONFIG","name":"CONFIG","value":"Configuration.new"},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"TODO: Write documentation for `Conveyor`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code><a href=\"Conveyor.html\">Conveyor</a></code></p>","class_methods":[{"html_id":"configure(&)-class-method","name":"configure","abstract":false,"location":{"filename":"src/configuration.cr","line_number":4,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L4"},"def":{"name":"configure","yields":1,"block_arity":1,"visibility":"Public","body":"yield CONFIG\nnil\n"}},{"html_id":"orchestrator:Orchestrator-class-method","name":"orchestrator","abstract":false,"location":{"filename":"src/conveyor.cr","line_number":12,"url":"https://github.com/jgaskins/conveyor/blob/main/src/conveyor.cr#L12"},"def":{"name":"orchestrator","return_type":"Orchestrator","visibility":"Public","body":"if (value = @@orchestrator).nil?\n  @@orchestrator = (Orchestrator.new(CONFIG))\nelse\n  value\nend"}},{"html_id":"schedule(&)-class-method","name":"schedule","abstract":false,"location":{"filename":"src/conveyor.cr","line_number":14,"url":"https://github.com/jgaskins/conveyor/blob/main/src/conveyor.cr#L14"},"def":{"name":"schedule","yields":1,"block_arity":1,"visibility":"Public","body":"orchestrator.schedule do |schedule|\n  yield schedule\nend"}}],"types":[{"html_id":"conveyor/Conveyor/Belt","path":"Conveyor/Belt.html","kind":"class","full_name":"Conveyor::Belt","name":"Belt","abstract":false,"superclass":{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/belt.cr","line_number":25,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L25"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"},"doc":"The `Conveyor::Belt` processes your `Job` instances sequentially. Each job\nis fetched from Redis and placed on the belt to be processed. If the job\ndoes not complete successfully, it is removed from the belt and placed back\nin the queue, waiting an [exponential amount of\ntime](https://en.wikipedia.org/wiki/Exponential_backoff) before retrying.\n\nYour application can have one or more `Conveyor::Belt`s, allowing you to process multiple jobs concurrently. You can configure this by setting `Configuration#concurrency`:\n\n```\nConveyor.configure do |config|\n  # ...\n  c.concurrency = 10\nend\n```\n\nThe `Orchestrator` will manage your `Belt` instances throughout their entire\nlifecycle, so you shouldn't need to deal with `Conveyor::Belt` directly in\nyour application, but it's a good idea to know that it exists.","summary":"<p>The <code><a href=\"../Conveyor/Belt.html\">Conveyor::Belt</a></code> processes your <code><a href=\"../Conveyor/Job.html\">Job</a></code> instances sequentially.</p>","constructors":[{"html_id":"new(*,redis:Redis::Client,queues:Array(String),presence_duration:Time::Span,timeout:Time::Span=2.seconds,log:Log=Log.for(\"conveyor.belt\"),max_attempts:Int32=25)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"redis","external_name":"redis","restriction":"::Redis::Client"},{"name":"queues","external_name":"queues","restriction":"::Array(::String)"},{"name":"presence_duration","external_name":"presence_duration","restriction":"::Time::Span"},{"name":"timeout","default_value":"2.seconds","external_name":"timeout","restriction":"::Time::Span"},{"name":"log","default_value":"Log.for(\"conveyor.belt\")","external_name":"log","restriction":"::Log"},{"name":"max_attempts","default_value":"25","external_name":"max_attempts","restriction":"::Int32"}],"args_string":"(*, redis : Redis::Client, queues : Array(String), presence_duration : Time::Span, timeout : Time::Span = 2.seconds, log : Log = Log.for(\"conveyor.belt\"), max_attempts : Int32 = 25)","args_html":"(*, redis : Redis::Client, queues : Array(String), presence_duration : Time::Span, timeout : Time::Span = <span class=\"n\">2</span>.seconds, log : Log = <span class=\"t\">Log</span>.<span class=\"k\">for</span>(<span class=\"s\">&quot;conveyor.belt&quot;</span>), max_attempts : Int32 = <span class=\"n\">25</span>)","location":{"filename":"src/belt.cr","line_number":37,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L37"},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"redis","external_name":"redis","restriction":"::Redis::Client"},{"name":"queues","external_name":"queues","restriction":"::Array(::String)"},{"name":"presence_duration","external_name":"presence_duration","restriction":"::Time::Span"},{"name":"timeout","default_value":"2.seconds","external_name":"timeout","restriction":"::Time::Span"},{"name":"log","default_value":"Log.for(\"conveyor.belt\")","external_name":"log","restriction":"::Log"},{"name":"max_attempts","default_value":"25","external_name":"max_attempts","restriction":"::Int32"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(redis: redis, queues: queues, presence_duration: presence_duration, timeout: timeout, log: log, max_attempts: max_attempts)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clear_queues!-instance-method","name":"clear_queues!","abstract":false,"location":{"filename":"src/belt.cr","line_number":233,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L233"},"def":{"name":"clear_queues!","visibility":"Public","body":"queue_keys = @queues.map do |queue|\n  \"conveyor:queue:#{queue}\"\nend\njob_keys = @redis.pipeline do |pipe|\n  queue_keys.each do |key|\n    pipe.lrange(key, 0, -1)\n  end\nend.flat_map() do |__arg4|\n  __arg4.as(Array)\nend.flat_map do |id|\n  \"conveyor:job:#{id}\"\nend\n@redis.unlink(job_keys + queue_keys)\n"}},{"html_id":"delete(id:String):self-instance-method","name":"delete","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : self","args_html":"(id : String) : <span class=\"k\">self</span>","location":{"filename":"src/belt.cr","line_number":228,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L228"},"def":{"name":"delete","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"self","visibility":"Public","body":"@redis.unlink(\"conveyor:job:#{id}\")\nself\n"}},{"html_id":"fetch:JobData|Nil-instance-method","name":"fetch","doc":"Retrieves `JobData` from Redis, if there are any pending jobs in any of\nthe queues passed to this `Belt`'s constructor. This method also marks the\njob in Redis as `pending` and assigned to this `Belt`.","summary":"<p>Retrieves <code><a href=\"../Conveyor/JobData.html\">JobData</a></code> from Redis, if there are any pending jobs in any of the queues passed to this <code><a href=\"../Conveyor/Belt.html\">Belt</a></code>'s constructor.</p>","abstract":false,"location":{"filename":"src/belt.cr","line_number":109,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L109"},"def":{"name":"fetch","return_type":"JobData | ::Nil","visibility":"Public","body":"queues = @queues.map do |name|\n  \"conveyor:queue:#{name}\"\nend\nstart = Time.monotonic\nif result = (@redis.blpop(queues, timeout: @timeout)).as?(Array)\n  queue, job_id = {String, String}.from(result)\n  @log.trace(&.emit(\"Received job\", poll_duration_sec: (Time.monotonic - start).total_seconds, job_id: job_id))\n  fetch_job_data(job_id, queue.lchop(\"conveyor:queue:\"))\nend\n"}},{"html_id":"id:String-instance-method","name":"id","abstract":false,"location":{"filename":"src/belt.cr","line_number":28,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L28"},"def":{"name":"id","visibility":"Public","body":"@id"}},{"html_id":"jobs_per_second-instance-method","name":"jobs_per_second","abstract":false,"location":{"filename":"src/belt.cr","line_number":246,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L246"},"def":{"name":"jobs_per_second","visibility":"Public","body":"clear_outdated_jobs!\n@jobs.size\n"}},{"html_id":"on_error(&on_error:::Exception->Nil)-instance-method","name":"on_error","doc":"Tell this belt what to do when an exception occurs while `fetch`ing or\n`work`ing on a `Job`.","summary":"<p>Tell this belt what to do when an exception occurs while <code><a href=\"../Conveyor/Belt.html#fetch%3AJobData%7CNil-instance-method\">#fetch</a></code>ing or <code><a href=\"../Conveyor/Belt.html#work%28data%3AJobData%29-instance-method\">#work</a></code>ing on a <code><a href=\"../Conveyor/Job.html\">Job</a></code>.</p>","abstract":false,"location":{"filename":"src/belt.cr","line_number":102,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L102"},"def":{"name":"on_error","yields":1,"block_arity":1,"block_arg":{"name":"on_error","external_name":"on_error","restriction":"(::Exception -> Nil)"},"visibility":"Public","body":"@on_error = on_error\nself\n"}},{"html_id":"reenqueue(job_data:JobData,max_attempts:Int32,exception:::Exception|Nil):self-instance-method","name":"reenqueue","doc":"Reschedule the job to run after an amount of time based on the number of times the job has been attempted has passed.","summary":"<p>Reschedule the job to run after an amount of time based on the number of times the job has been attempted has passed.</p>","abstract":false,"args":[{"name":"job_data","external_name":"job_data","restriction":"JobData"},{"name":"max_attempts","external_name":"max_attempts","restriction":"Int32"},{"name":"exception","external_name":"exception","restriction":"::Exception | ::Nil"}],"args_string":"(job_data : JobData, max_attempts : Int32, exception : ::Exception | Nil) : self","args_html":"(job_data : <a href=\"../Conveyor/JobData.html\">JobData</a>, max_attempts : Int32, exception : ::Exception | Nil) : <span class=\"k\">self</span>","location":{"filename":"src/belt.cr","line_number":198,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L198"},"def":{"name":"reenqueue","args":[{"name":"job_data","external_name":"job_data","restriction":"JobData"},{"name":"max_attempts","external_name":"max_attempts","restriction":"Int32"},{"name":"exception","external_name":"exception","restriction":"::Exception | ::Nil"}],"return_type":"self","visibility":"Public","body":"job_key = \"conveyor:job:#{job_data.id}\"\n@redis.pipeline do |pipe|\n  pipe.hincrby(job_key, \"attempts\", \"1\")\n  pipe.hdel(job_key, \"pending\", \"belt\")\n  if exception\n    pipe.hset(job_key, \"error\", exception.inspect)\n  end\n  if (job_data.attempts + 1) < max_attempts\n    scheduled_time = (1 << {job_data.attempts + 5, 25}.min).milliseconds.from_now\n    pipe.zadd(\"conveyor:scheduled\", score: scheduled_time.to_unix_ms, value: job_data.id)\n  else\n    pipe.run({\"rename\", job_key, \"conveyor:dead-job:#{job_data.id}\"})\n    pipe.sadd(\"conveyor:dead\", job_data.id)\n  end\nend\nself\n"}},{"html_id":"run_one:Nil-instance-method","name":"run_one","doc":"Fetch and perform a single job","summary":"<p>Fetch and perform a single job</p>","abstract":false,"location":{"filename":"src/belt.cr","line_number":83,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L83"},"def":{"name":"run_one","return_type":"Nil","visibility":"Public","body":"begin\n  @state = :waiting\n  if job_data = fetch\n    @state = :working\n    work(job_data)\n  end\nensure\n  @state = :waiting\nend"}},{"html_id":"running?:Bool-instance-method","name":"running?","abstract":false,"location":{"filename":"src/belt.cr","line_number":26,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L26"},"def":{"name":"running?","visibility":"Public","body":"@running"}},{"html_id":"start(&)-instance-method","name":"start","doc":"Start up this belt to begin processing jobs from the queues that feed\ninto it. This is called by the `Orchestrator` on start.","summary":"<p>Start up this belt to begin processing jobs from the queues that feed into it.</p>","abstract":false,"location":{"filename":"src/belt.cr","line_number":50,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L50"},"def":{"name":"start","yields":0,"block_arity":0,"visibility":"Public","body":"begin\n  @running = true\n  spawn do\n    while running?\n      begin\n        @redis.set(\"conveyor:belt:#{id}\", \".\", ex: @presence_duration)\n      rescue ex\n      ensure\n        sleep(@presence_duration - 100.milliseconds)\n      end\n    end\n  end\n  while running?\n    begin\n      run_one\n    rescue ex\n      begin\n        @on_error.call(ex)\n      rescue secondary_failure\n        @log.error(exception: secondary_failure) do\n          secondary_failure\n        end\n      end\n    end\n  end\nensure\n  yield\nend"}},{"html_id":"state:State-instance-method","name":"state","abstract":false,"location":{"filename":"src/belt.cr","line_number":27,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L27"},"def":{"name":"state","return_type":"State","visibility":"Public","body":"@state"}},{"html_id":"stop-instance-method","name":"stop","doc":"Stop processing jobs on this belt. The currently processing job will finish as long as the process does not exit beforehand, but no new jobs will be processed on this belt.\n\nThe `Orchestrator` typically calls this method.","summary":"<p>Stop processing jobs on this belt.</p>","abstract":false,"location":{"filename":"src/belt.cr","line_number":96,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L96"},"def":{"name":"stop","visibility":"Public","body":"@running = false"}},{"html_id":"work(data:JobData)-instance-method","name":"work","doc":"Deserializes the job payload provided by the given `JobData` and calls the\njob type's `Job#call` method. If an exception occurs while processing the\njob, the belt's `on_error` block is invoked and the job is rescheduled to\nrun on an exponential-backoff schedule based on how many times the job has\nbeen attempted.","summary":"<p>Deserializes the job payload provided by the given <code><a href=\"../Conveyor/JobData.html\">JobData</a></code> and calls the job type's <code><a href=\"../Conveyor/Job.html#call-instance-method\">Job#call</a></code> method.</p>","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"JobData"}],"args_string":"(data : JobData)","args_html":"(data : <a href=\"../Conveyor/JobData.html\">JobData</a>)","location":{"filename":"src/belt.cr","line_number":152,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L152"},"def":{"name":"work","args":[{"name":"data","external_name":"data","restriction":"JobData"}],"visibility":"Public","body":"@log.debug(&.emit(\"starting\", id: data.id, type: data.type, queue: data.queue, attempts: data.attempts))\nstart = Time.monotonic\nbegin\n  clear_outdated_jobs!\n  job = data.job\n  work(job)\n  delete(data.id)\n  finish = Time.monotonic\n  @log.info(&.emit(\"complete\", id: data.id, type: data.type, queue: data.queue, attempts: data.attempts + 1, duration_sec: (finish - start).total_seconds))\nrescue ex\n  @on_error.call(ex)\n  errored_at = Time.monotonic\n  max_attempts = begin\n    data.job_type.max_attempts\n  rescue\n    @max_attempts\n  end\n  @log.error(exception: ex, &.emit(\"error\", id: data.id, type: data.type, queue: data.queue, attempts: data.attempts + 1, max_attempts: max_attempts, duration_sec: (errored_at - start).total_seconds))\n  reenqueue(data, max_attempts, ex)\nensure\n  @jobs << start\nend\n"}}],"types":[{"html_id":"conveyor/Conveyor/Belt/State","path":"Conveyor/Belt/State.html","kind":"enum","full_name":"Conveyor::Belt::State","name":"State","abstract":false,"ancestors":[{"html_id":"conveyor/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"conveyor/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"conveyor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/belt.cr","line_number":258,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L258"}],"repository_name":"conveyor","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Waiting","name":"Waiting","value":"0"},{"id":"Working","name":"Working","value":"1"}],"namespace":{"html_id":"conveyor/Conveyor/Belt","kind":"class","full_name":"Conveyor::Belt","name":"Belt"},"instance_methods":[{"html_id":"waiting?-instance-method","name":"waiting?","abstract":false,"location":{"filename":"src/belt.cr","line_number":259,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L259"},"def":{"name":"waiting?","visibility":"Public","body":"self == Waiting"}},{"html_id":"working?-instance-method","name":"working?","abstract":false,"location":{"filename":"src/belt.cr","line_number":260,"url":"https://github.com/jgaskins/conveyor/blob/main/src/belt.cr#L260"},"def":{"name":"working?","visibility":"Public","body":"self == Working"}}]}]},{"html_id":"conveyor/Conveyor/Configuration","path":"Conveyor/Configuration.html","kind":"class","full_name":"Conveyor::Configuration","name":"Configuration","abstract":false,"superclass":{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/configuration.cr","line_number":9,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L9"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"},"instance_methods":[{"html_id":"concurrency:Int32-instance-method","name":"concurrency","abstract":false,"location":{"filename":"src/configuration.cr","line_number":13,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L13"},"def":{"name":"concurrency","return_type":"Int32","visibility":"Public","body":"if (value = @concurrency).nil?\n  @concurrency = ((ENV.fetch(\"CONVEYOR_CONCURRENCY\", \"10\")).to_i)\nelse\n  value\nend"}},{"html_id":"concurrency=(concurrency:Int32)-instance-method","name":"concurrency=","abstract":false,"args":[{"name":"concurrency","external_name":"concurrency","restriction":"Int32"}],"args_string":"(concurrency : Int32)","args_html":"(concurrency : Int32)","location":{"filename":"src/configuration.cr","line_number":13,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L13"},"def":{"name":"concurrency=","args":[{"name":"concurrency","external_name":"concurrency","restriction":"Int32"}],"visibility":"Public","body":"@concurrency = concurrency"}},{"html_id":"max_attempts:Int32-instance-method","name":"max_attempts","abstract":false,"location":{"filename":"src/configuration.cr","line_number":22,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L22"},"def":{"name":"max_attempts","return_type":"Int32","visibility":"Public","body":"if (value = @max_attempts).nil?\n  @max_attempts = ((ENV.fetch(\"CONVEYOR_JOB_MAX_ATTEMPTS\", \"25\")).to_i32)\nelse\n  value\nend"}},{"html_id":"max_attempts=(max_attempts:Int32)-instance-method","name":"max_attempts=","abstract":false,"args":[{"name":"max_attempts","external_name":"max_attempts","restriction":"Int32"}],"args_string":"(max_attempts : Int32)","args_html":"(max_attempts : Int32)","location":{"filename":"src/configuration.cr","line_number":22,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L22"},"def":{"name":"max_attempts=","args":[{"name":"max_attempts","external_name":"max_attempts","restriction":"Int32"}],"visibility":"Public","body":"@max_attempts = max_attempts"}},{"html_id":"orphan_check_interval:Time::Span-instance-method","name":"orphan_check_interval","abstract":false,"location":{"filename":"src/configuration.cr","line_number":19,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L19"},"def":{"name":"orphan_check_interval","return_type":"Time::Span","visibility":"Public","body":"if (value = @orphan_check_interval).nil?\n  @orphan_check_interval = ((ENV.fetch(\"CONVEYOR_ORPHAN_CHECK_DURATION_MIN\", \"10\")).to_f.minutes)\nelse\n  value\nend"}},{"html_id":"orphan_check_interval=(orphan_check_interval:Time::Span)-instance-method","name":"orphan_check_interval=","abstract":false,"args":[{"name":"orphan_check_interval","external_name":"orphan_check_interval","restriction":"Time::Span"}],"args_string":"(orphan_check_interval : Time::Span)","args_html":"(orphan_check_interval : Time::Span)","location":{"filename":"src/configuration.cr","line_number":19,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L19"},"def":{"name":"orphan_check_interval=","args":[{"name":"orphan_check_interval","external_name":"orphan_check_interval","restriction":"Time::Span"}],"visibility":"Public","body":"@orphan_check_interval = orphan_check_interval"}},{"html_id":"queues:Array(String)-instance-method","name":"queues","abstract":false,"location":{"filename":"src/configuration.cr","line_number":16,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L16"},"def":{"name":"queues","return_type":"Array(String)","visibility":"Public","body":"if (value = @queues).nil?\n  @queues = (((ENV.fetch(\"CONVEYOR_QUEUES\", \"default\")).split(',')).map(&.strip))\nelse\n  value\nend"}},{"html_id":"queues=(queues:Array(String))-instance-method","name":"queues=","abstract":false,"args":[{"name":"queues","external_name":"queues","restriction":"Array(String)"}],"args_string":"(queues : Array(String))","args_html":"(queues : Array(String))","location":{"filename":"src/configuration.cr","line_number":16,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L16"},"def":{"name":"queues=","args":[{"name":"queues","external_name":"queues","restriction":"Array(String)"}],"visibility":"Public","body":"@queues = queues"}},{"html_id":"redis:Redis::Client-instance-method","name":"redis","abstract":false,"location":{"filename":"src/configuration.cr","line_number":10,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L10"},"def":{"name":"redis","return_type":"Redis::Client","visibility":"Public","body":"if (value = @redis).nil?\n  @redis = (Redis::Client.from_env(\"REDIS_URL\"))\nelse\n  value\nend"}},{"html_id":"redis=(redis:Redis::Client)-instance-method","name":"redis=","abstract":false,"args":[{"name":"redis","external_name":"redis","restriction":"Redis::Client"}],"args_string":"(redis : Redis::Client)","args_html":"(redis : Redis::Client)","location":{"filename":"src/configuration.cr","line_number":10,"url":"https://github.com/jgaskins/conveyor/blob/main/src/configuration.cr#L10"},"def":{"name":"redis=","args":[{"name":"redis","external_name":"redis","restriction":"Redis::Client"}],"visibility":"Public","body":"@redis = redis"}}]},{"html_id":"conveyor/Conveyor/Exception","path":"Conveyor/Exception.html","kind":"class","full_name":"Conveyor::Exception","name":"Exception","abstract":false,"superclass":{"html_id":"conveyor/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"conveyor/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":2,"url":"https://github.com/jgaskins/conveyor/blob/main/src/errors.cr#L2"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"conveyor/Conveyor/NoBelts","kind":"class","full_name":"Conveyor::NoBelts","name":"NoBelts"},{"html_id":"conveyor/Conveyor/UnknownJobType","kind":"class","full_name":"Conveyor::UnknownJobType","name":"UnknownJobType"}],"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"},"macros":[{"html_id":"define(name)-macro","name":"define","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/errors.cr","line_number":3,"url":"https://github.com/jgaskins/conveyor/blob/main/src/errors.cr#L3"},"def":{"name":"define","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"      class \n{{ name }}\n < \n{{ @type }}\n\n      \nend\n    \n"}}]},{"html_id":"conveyor/Conveyor/Job","path":"Conveyor/Job.html","kind":"struct","full_name":"Conveyor::Job","name":"Job","abstract":true,"superclass":{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"conveyor/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"conveyor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/job.cr","line_number":18,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L18"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"conveyor/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"subclasses":[{"html_id":"conveyor/Conveyor/Job/Bogus","kind":"struct","full_name":"Conveyor::Job::Bogus","name":"Bogus"},{"html_id":"conveyor/Conveyor/Job/Bogus2","kind":"struct","full_name":"Conveyor::Job::Bogus2","name":"Bogus2"}],"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"},"doc":"The `Job` is the unit of work in Conveyor. A representation of it is stored\nin Redis along with some metadata, and when it is time to execute that job,\nit is deserialized and its `call` method is invoked.\n\nJobs are enqueued to be executed ASAP with the `enqueue` method or scheduled\nwith the `schedule` method. Enqueuing a job runs it as soon as there is an\navailable `Conveyor::Belt`.\n\nDefining a job is a matter of defining a struct that inherits from\n`Conveyor::Job` (either directly or indirectly) and overriding the `call`\nmethod to perform its work. The `call` method is used as the calling\nconvention used by `Proc` instances.","summary":"<p>The <code><a href=\"../Conveyor/Job.html\">Job</a></code> is the unit of work in Conveyor.</p>","class_methods":[{"html_id":"dequeue(id:String,*,configurationconfig:Configuration=CONFIG):Nil-class-method","name":"dequeue","doc":"Remove this job from all queues. This method will not unschedule the job.","summary":"<p>Remove this job from all queues.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"","external_name":"","restriction":""},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"args_string":"(id : String, *, configuration config : Configuration = CONFIG) : Nil","args_html":"(id : String, *, configuration config : <a href=\"../Conveyor/Configuration.html\">Configuration</a> = <span class=\"t\">CONFIG</span>) : Nil","location":{"filename":"src/job.cr","line_number":141,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L141"},"def":{"name":"dequeue","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"","external_name":"","restriction":""},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"splat_index":1,"return_type":"Nil","visibility":"Public","body":"config.redis.unlink(\"conveyor:job:#{id}\")"}},{"html_id":"max_attempts(max_attempts:Int32)-class-method","name":"max_attempts","abstract":false,"args":[{"name":"max_attempts","external_name":"max_attempts","restriction":"Int32"}],"args_string":"(max_attempts : Int32)","args_html":"(max_attempts : Int32)","location":{"filename":"src/job.cr","line_number":186,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L186"},"def":{"name":"max_attempts","args":[{"name":"max_attempts","external_name":"max_attempts","restriction":"Int32"}],"visibility":"Public","body":"@@max_attempts = max_attempts"}},{"html_id":"max_attempts:Int32-class-method","name":"max_attempts","abstract":false,"location":{"filename":"src/job.cr","line_number":184,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L184"},"def":{"name":"max_attempts","return_type":"Int32","visibility":"Public","body":"@@max_attempts"}},{"html_id":"unschedule(id:String,configurationconfig:Configuration=CONFIG):Nil-class-method","name":"unschedule","doc":"If this job was scheduled via one of the `schedule` methods, this method will remove it from the schedule.","summary":"<p>If this job was scheduled via one of the <code><a href=\"../Conveyor/Job.html#schedule%28indelay%3ATime%3A%3ASpan%2Cqueue%3AString%3Dself.queue%2Cconfigurationconfig%3AConfiguration%3DCONFIG%29%3AString-instance-method\">#schedule</a></code> methods, this method will remove it from the schedule.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"args_string":"(id : String, configuration config : Configuration = CONFIG) : Nil","args_html":"(id : String, configuration config : <a href=\"../Conveyor/Configuration.html\">Configuration</a> = <span class=\"t\">CONFIG</span>) : Nil","location":{"filename":"src/job.cr","line_number":149,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L149"},"def":{"name":"unschedule","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"return_type":"Nil","visibility":"Public","body":"config.redis.zrem(\"conveyor:scheduled\", id)"}}],"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/job.cr","line_number":19,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L19"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"call-instance-method","name":"call","doc":"Override this method to provide this job's functionality.","summary":"<p>Override this method to provide this job's functionality.</p>","abstract":true,"location":{"filename":"src/job.cr","line_number":28,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L28"},"def":{"name":"call","visibility":"Public","body":""}},{"html_id":"enqueue(*,queue:String=self.queue,configurationconfig:Configuration=CONFIG):String-instance-method","name":"enqueue","doc":"Enqueues this job in the specified queue, or to the job's default queue if\nthe queue isn't provided explicitly, to be executed immediately. You can\nalso pass a `Configuration` instance to use different settings.\n\n```\nstruct MyJob < Conveyor::Job\n  def initialize(@arg : String)\n  end\n\n  def call\n    # ...\n  end\nend\n\nMyJob.new(\"asdf\").enqueue\n```","summary":"<p>Enqueues this job in the specified queue, or to the job's default queue if the queue isn't provided explicitly, to be executed immediately.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"queue","default_value":"self.queue","external_name":"queue","restriction":"String"},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"args_string":"(*, queue : String = self.queue, configuration config : Configuration = CONFIG) : String","args_html":"(*, queue : String = <span class=\"k\">self</span>.queue, configuration config : <a href=\"../Conveyor/Configuration.html\">Configuration</a> = <span class=\"t\">CONFIG</span>) : String","location":{"filename":"src/job.cr","line_number":125,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L125"},"def":{"name":"enqueue","args":[{"name":"","external_name":"","restriction":""},{"name":"queue","default_value":"self.queue","external_name":"queue","restriction":"String"},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"splat_index":0,"return_type":"String","visibility":"Public","body":"id = generate_id\nresult = config.redis.pipeline do |pipe|\n  pipe.hset(\"conveyor:job:#{id}\", id: id, type: conveyor_job_type, queue: queue, payload: to_json)\n  pipe.rpush(\"conveyor:queue:#{queue}\", id)\nend\nid\n"}},{"html_id":"schedule(indelay:Time::Span,queue:String=self.queue,configurationconfig:Configuration=CONFIG):String-instance-method","name":"schedule","doc":"Enqueues this job in the specified queue, or to the job's default queue if\nthe queue isn't provided, to be executed after the given amount of time.\nYou can also pass a `Configuration` instance to use different settings.\n\n```\nstruct MyJob < Conveyor::Job\n  def initialize(@arg : String)\n  end\n\n  def call\n    # ...\n  end\nend\n\nMyJob.new(\"asdf\").enqueue in: 1.minute\n```","summary":"<p>Enqueues this job in the specified queue, or to the job's default queue if the queue isn't provided, to be executed after the given amount of time.</p>","abstract":false,"args":[{"name":"delay","external_name":"in","restriction":"Time::Span"},{"name":"queue","default_value":"self.queue","external_name":"queue","restriction":"String"},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"args_string":"(in delay : Time::Span, queue : String = self.queue, configuration config : Configuration = CONFIG) : String","args_html":"(in delay : Time::Span, queue : String = <span class=\"k\">self</span>.queue, configuration config : <a href=\"../Conveyor/Configuration.html\">Configuration</a> = <span class=\"t\">CONFIG</span>) : String","location":{"filename":"src/job.cr","line_number":71,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L71"},"def":{"name":"schedule","args":[{"name":"delay","external_name":"in","restriction":"Time::Span"},{"name":"queue","default_value":"self.queue","external_name":"queue","restriction":"String"},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"return_type":"String","visibility":"Public","body":"schedule(at: delay.from_now, queue: queue, configuration: config)"}},{"html_id":"schedule(attime:Time,queue:String=self.queue,configurationconfig:Configuration=CONFIG):String-instance-method","name":"schedule","doc":"Enqueues this job in the specified queue, or to the job's default queue if\nthe queue isn't provided explicitly, to be executed at the specified\ntime. You can also pass a `Configuration` instance to use different\nsettings.\n\n```\nstruct MyJob < Conveyor::Job\n  def initialize(@arg : String)\n  end\n\n  def call\n    # ...\n  end\nend\n\nMyJob.new(\"asdf\").enqueue at: timestamp\n```","summary":"<p>Enqueues this job in the specified queue, or to the job's default queue if the queue isn't provided explicitly, to be executed at the specified time.</p>","abstract":false,"args":[{"name":"time","external_name":"at","restriction":"Time"},{"name":"queue","default_value":"self.queue","external_name":"queue","restriction":"String"},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"args_string":"(at time : Time, queue : String = self.queue, configuration config : Configuration = CONFIG) : String","args_html":"(at time : Time, queue : String = <span class=\"k\">self</span>.queue, configuration config : <a href=\"../Conveyor/Configuration.html\">Configuration</a> = <span class=\"t\">CONFIG</span>) : String","location":{"filename":"src/job.cr","line_number":92,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L92"},"def":{"name":"schedule","args":[{"name":"time","external_name":"at","restriction":"Time"},{"name":"queue","default_value":"self.queue","external_name":"queue","restriction":"String"},{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"Configuration"}],"return_type":"String","visibility":"Public","body":"id = generate_id\nconfig.redis.pipeline do |pipe|\n  pipe.hset(\"conveyor:job:#{id}\", id: id, type: conveyor_job_type, queue: queue, payload: to_json)\n  pipe.zadd(\"conveyor:scheduled\", score: time.to_unix_ms, value: id)\nend\nid\n"}}],"macros":[{"html_id":"queue(name)-macro","name":"queue","doc":"Define the queue your job will enqueue on by default\n\n```\nstruct SendEmail < Conveyor::Job\n  # Emails get their own queue\n  queue \"email\"\n\n  def initialize(@email_address : String, @body : String)\n  end\n\n  def call\n    # ...\n  end\nend\n```","summary":"<p>Define the queue your job will enqueue on by default</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/job.cr","line_number":178,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L178"},"def":{"name":"queue","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"      def queue\n        \"\n{{ name.id }}\n\"\n      \nend\n    \n"}}],"types":[{"html_id":"conveyor/Conveyor/Job/Bogus","path":"Conveyor/Job/Bogus.html","kind":"struct","full_name":"Conveyor::Job::Bogus","name":"Bogus","abstract":false,"superclass":{"html_id":"conveyor/Conveyor/Job","kind":"struct","full_name":"Conveyor::Job","name":"Job"},"ancestors":[{"html_id":"conveyor/Conveyor/Job","kind":"struct","full_name":"Conveyor::Job","name":"Job"},{"html_id":"conveyor/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"conveyor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/job.cr","line_number":191,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L191"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor/Job","kind":"struct","full_name":"Conveyor::Job","name":"Job"},"doc":"You can use this job type for testing empty jobs, such as benchmarking your\njob-processing infrastructure (compute infra and Redis).","summary":"<p>You can use this job type for testing empty jobs, such as benchmarking your job-processing infrastructure (compute infra and Redis).</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"You can use this job type for testing empty jobs, such as benchmarking your\njob-processing infrastructure (compute infra and Redis).","summary":"<p>You can use this job type for testing empty jobs, such as benchmarking your job-processing infrastructure (compute infra and Redis).</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/job.cr","line_number":191,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L191"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"call-instance-method","name":"call","doc":"Override this method to provide this job's functionality.","summary":"<p>Override this method to provide this job's functionality.</p>","abstract":false,"location":{"filename":"src/job.cr","line_number":192,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L192"},"def":{"name":"call","visibility":"Public","body":""}},{"html_id":"conveyor_job_type-instance-method","name":"conveyor_job_type","doc":"You can use this job type for testing empty jobs, such as benchmarking your\njob-processing infrastructure (compute infra and Redis).","summary":"<p>You can use this job type for testing empty jobs, such as benchmarking your job-processing infrastructure (compute infra and Redis).</p>","abstract":false,"def":{"name":"conveyor_job_type","visibility":"Public","body":"\"Conveyor::Job::Bogus\""}}]},{"html_id":"conveyor/Conveyor/Job/Bogus2","path":"Conveyor/Job/Bogus2.html","kind":"struct","full_name":"Conveyor::Job::Bogus2","name":"Bogus2","abstract":false,"superclass":{"html_id":"conveyor/Conveyor/Job","kind":"struct","full_name":"Conveyor::Job","name":"Job"},"ancestors":[{"html_id":"conveyor/Conveyor/Job","kind":"struct","full_name":"Conveyor::Job","name":"Job"},{"html_id":"conveyor/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"conveyor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/job.cr","line_number":199,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L199"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor/Job","kind":"struct","full_name":"Conveyor::Job","name":"Job"},"doc":"This is provided just to make sure we have at least 2 Job subclasses. As of\nCrystal 1.10.1, it crashes the compiler if there aren't.\n:nodoc:","summary":"<p>This is provided just to make sure we have at least 2 Job subclasses.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"This is provided just to make sure we have at least 2 Job subclasses. As of\nCrystal 1.10.1, it crashes the compiler if there aren't.\n:nodoc:","summary":"<p>This is provided just to make sure we have at least 2 Job subclasses.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/job.cr","line_number":199,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L199"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"call-instance-method","name":"call","doc":"Override this method to provide this job's functionality.","summary":"<p>Override this method to provide this job's functionality.</p>","abstract":false,"location":{"filename":"src/job.cr","line_number":200,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job.cr#L200"},"def":{"name":"call","visibility":"Public","body":""}},{"html_id":"conveyor_job_type-instance-method","name":"conveyor_job_type","doc":"This is provided just to make sure we have at least 2 Job subclasses. As of\nCrystal 1.10.1, it crashes the compiler if there aren't.\n:nodoc:","summary":"<p>This is provided just to make sure we have at least 2 Job subclasses.</p>","abstract":false,"def":{"name":"conveyor_job_type","visibility":"Public","body":"\"Conveyor::Job::Bogus2\""}}]}]},{"html_id":"conveyor/Conveyor/JobData","path":"Conveyor/JobData.html","kind":"struct","full_name":"Conveyor::JobData","name":"JobData","abstract":false,"superclass":{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"conveyor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/job_data.cr","line_number":5,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L5"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"},"constructors":[{"html_id":"new(id:String,type:String,queue:String,attempts:Int32,payload:String,pending:Bool=false,belt:Nil|String=nil)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"type","external_name":"type","restriction":"::String"},{"name":"queue","external_name":"queue","restriction":"::String"},{"name":"attempts","external_name":"attempts","restriction":"::Int32"},{"name":"payload","external_name":"payload","restriction":"::String"},{"name":"pending","default_value":"false","external_name":"pending","restriction":"::Bool"},{"name":"belt","default_value":"nil","external_name":"belt","restriction":"::Nil | ::String"}],"args_string":"(id : String, type : String, queue : String, attempts : Int32, payload : String, pending : Bool = false, belt : Nil | String = nil)","args_html":"(id : String, type : String, queue : String, attempts : Int32, payload : String, pending : Bool = <span class=\"n\">false</span>, belt : Nil | String = <span class=\"n\">nil</span>)","location":{"filename":"src/job_data.cr","line_number":27,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L27"},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"type","external_name":"type","restriction":"::String"},{"name":"queue","external_name":"queue","restriction":"::String"},{"name":"attempts","external_name":"attempts","restriction":"::Int32"},{"name":"payload","external_name":"payload","restriction":"::String"},{"name":"pending","default_value":"false","external_name":"pending","restriction":"::Bool"},{"name":"belt","default_value":"nil","external_name":"belt","restriction":"::Nil | ::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, type, queue, attempts, payload, pending, belt)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(hash:Hash)-class-method","name":"new","abstract":false,"args":[{"name":"hash","external_name":"hash","restriction":"Hash"}],"args_string":"(hash : Hash)","args_html":"(hash : Hash)","location":{"filename":"src/job_data.cr","line_number":15,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L15"},"def":{"name":"new","args":[{"name":"hash","external_name":"hash","restriction":"Hash"}],"visibility":"Public","body":"new(id: hash[\"id\"].as(String), type: hash[\"type\"].as(String), queue: hash[\"queue\"].as(String), attempts: ((hash.fetch(\"attempts\", 0)).as(String | Int32)).to_i32, payload: hash[\"payload\"].as(String), pending: hash[\"pending\"]? == \"true\", belt: hash[\"belt\"]?.as(String | ::Nil))"}}],"instance_methods":[{"html_id":"attempts:Int32-instance-method","name":"attempts","abstract":false,"location":{"filename":"src/job_data.cr","line_number":9,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L9"},"def":{"name":"attempts","return_type":"Int32","visibility":"Public","body":"@attempts"}},{"html_id":"belt:String|Nil-instance-method","name":"belt","abstract":false,"location":{"filename":"src/job_data.cr","line_number":13,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L13"},"def":{"name":"belt","return_type":"String | ::Nil","visibility":"Public","body":"@belt"}},{"html_id":"id:String-instance-method","name":"id","abstract":false,"location":{"filename":"src/job_data.cr","line_number":6,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L6"},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"job:Job-instance-method","name":"job","abstract":false,"location":{"filename":"src/job_data.cr","line_number":30,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L30"},"def":{"name":"job","return_type":"Job","visibility":"Public","body":"if (value = @job).nil?\n  @job = (job_type.from_json(payload))\nelse\n  value\nend"}},{"html_id":"job_type-instance-method","name":"job_type","abstract":false,"location":{"filename":"src/job_data.cr","line_number":32,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L32"},"def":{"name":"job_type","visibility":"Public","body":"if job_type = Job.handler_for(type)\n  job_type\nelse\n  raise(UnknownJobType.new(\"No job type registered for #{type.inspect}\"))\nend"}},{"html_id":"payload:String-instance-method","name":"payload","abstract":false,"location":{"filename":"src/job_data.cr","line_number":11,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L11"},"def":{"name":"payload","return_type":"String","visibility":"Public","body":"@payload"}},{"html_id":"pending?:Bool-instance-method","name":"pending?","abstract":false,"location":{"filename":"src/job_data.cr","line_number":12,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L12"},"def":{"name":"pending?","visibility":"Public","body":"@pending"}},{"html_id":"queue:String-instance-method","name":"queue","abstract":false,"location":{"filename":"src/job_data.cr","line_number":8,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L8"},"def":{"name":"queue","return_type":"String","visibility":"Public","body":"@queue"}},{"html_id":"type:String-instance-method","name":"type","abstract":false,"location":{"filename":"src/job_data.cr","line_number":7,"url":"https://github.com/jgaskins/conveyor/blob/main/src/job_data.cr#L7"},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"conveyor/Conveyor/NoBelts","path":"Conveyor/NoBelts.html","kind":"class","full_name":"Conveyor::NoBelts","name":"NoBelts","abstract":false,"superclass":{"html_id":"conveyor/Conveyor/Exception","kind":"class","full_name":"Conveyor::Exception","name":"Exception"},"ancestors":[{"html_id":"conveyor/Conveyor/Exception","kind":"class","full_name":"Conveyor::Exception","name":"Exception"},{"html_id":"conveyor/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":10,"url":"https://github.com/jgaskins/conveyor/blob/main/src/errors.cr#L10"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"}},{"html_id":"conveyor/Conveyor/Orchestrator","path":"Conveyor/Orchestrator.html","kind":"class","full_name":"Conveyor::Orchestrator","name":"Orchestrator","abstract":false,"superclass":{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/orchestrator.cr","line_number":6,"url":"https://github.com/jgaskins/conveyor/blob/main/src/orchestrator.cr#L6"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"},"constructors":[{"html_id":"new(configurationconfig:Conveyor::Configuration=CONFIG,log:Log=Log.for(\"conveyor\"))-class-method","name":"new","abstract":false,"args":[{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"::Conveyor::Configuration"},{"name":"log","default_value":"Log.for(\"conveyor\")","external_name":"log","restriction":"::Log"}],"args_string":"(configuration config : Conveyor::Configuration = CONFIG, log : Log = Log.for(\"conveyor\"))","args_html":"(configuration config : <a href=\"../Conveyor/Configuration.html\">Conveyor::Configuration</a> = <span class=\"t\">CONFIG</span>, log : Log = <span class=\"t\">Log</span>.<span class=\"k\">for</span>(<span class=\"s\">&quot;conveyor&quot;</span>))","location":{"filename":"src/orchestrator.cr","line_number":11,"url":"https://github.com/jgaskins/conveyor/blob/main/src/orchestrator.cr#L11"},"def":{"name":"new","args":[{"name":"config","default_value":"CONFIG","external_name":"configuration","restriction":"::Conveyor::Configuration"},{"name":"log","default_value":"Log.for(\"conveyor\")","external_name":"log","restriction":"::Log"}],"visibility":"Public","body":"_ = allocate\n_.initialize(config, log)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clear_queues!-instance-method","name":"clear_queues!","abstract":false,"location":{"filename":"src/orchestrator.cr","line_number":201,"url":"https://github.com/jgaskins/conveyor/blob/main/src/orchestrator.cr#L201"},"def":{"name":"clear_queues!","visibility":"Public","body":"if belt = @belts.first?\n  belt.clear_queues!\nelse\n  raise(NoBelts.new(\"There are no Conveyor belts defined\"))\nend"}},{"html_id":"on_error(&on_error:::Exception->Nil):self-instance-method","name":"on_error","abstract":false,"location":{"filename":"src/orchestrator.cr","line_number":57,"url":"https://github.com/jgaskins/conveyor/blob/main/src/orchestrator.cr#L57"},"def":{"name":"on_error","yields":1,"block_arity":1,"block_arg":{"name":"on_error","external_name":"on_error","restriction":"(::Exception -> Nil)"},"return_type":"self","visibility":"Public","body":"@on_error = on_error\n@belts.each(&.on_error(&on_error))\nself\n"}},{"html_id":"schedule(&):Nil-instance-method","name":"schedule","abstract":false,"location":{"filename":"src/orchestrator.cr","line_number":62,"url":"https://github.com/jgaskins/conveyor/blob/main/src/orchestrator.cr#L62"},"def":{"name":"schedule","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"yield @scheduler"}},{"html_id":"start-instance-method","name":"start","abstract":false,"location":{"filename":"src/orchestrator.cr","line_number":24,"url":"https://github.com/jgaskins/conveyor/blob/main/src/orchestrator.cr#L24"},"def":{"name":"start","visibility":"Public","body":"@running = true\nconcurrency = @config.concurrency\nchannel = Channel(Nil).new(concurrency)\n@belts.each do |belt|\n  spawn do\n    belt.start do\n      channel.send(nil)\n    end\n  end\nend\nspawn(stats)\nspawn(check_for_orphans)\nspawn(check_for_scheduled)\n@scheduler.start\nwhile @running\n  sleep(100.milliseconds)\nend\n@belts.each_with_index do |belt, index|\n  @log.info(&.emit(\"Waiting for belt to stop\", belt_id: belt.id, index: index))\n  channel.receive\n  @log.info(&.emit(\"Stopped belt\", belt_id: belt.id, index: index))\nend\n@log.info do\n  \"All belts stopped. Shutting down.\"\nend\n"}},{"html_id":"stats-instance-method","name":"stats","abstract":false,"location":{"filename":"src/orchestrator.cr","line_number":66,"url":"https://github.com/jgaskins/conveyor/blob/main/src/orchestrator.cr#L66"},"def":{"name":"stats","visibility":"Public","body":"while @running\n  start = Time.monotonic\n  sleep(10.seconds)\n  finish = Time.monotonic\n  working = @belts.count() do |__arg4|\n    __arg4.state.working?\n  end\n  jobs_per_second = @belts.sum(&.jobs_per_second)\n  @log.info(&.emit(\"stats\", working: working, jobs_per_second: jobs_per_second))\nend"}},{"html_id":"stop-instance-method","name":"stop","abstract":false,"location":{"filename":"src/orchestrator.cr","line_number":49,"url":"https://github.com/jgaskins/conveyor/blob/main/src/orchestrator.cr#L49"},"def":{"name":"stop","visibility":"Public","body":"@scheduler.stop\n@running = false\n@belts.each(&.stop)\n"}}]},{"html_id":"conveyor/Conveyor/Scheduler","path":"Conveyor/Scheduler.html","kind":"class","full_name":"Conveyor::Scheduler","name":"Scheduler","abstract":false,"superclass":{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/scheduler.cr","line_number":4,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L4"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"},"constructors":[{"html_id":"new(redis:Redis::Client,interval:Time::Span=1.second)-class-method","name":"new","abstract":false,"args":[{"name":"redis","external_name":"redis","restriction":"::Redis::Client"},{"name":"interval","default_value":"1.second","external_name":"interval","restriction":"::Time::Span"}],"args_string":"(redis : Redis::Client, interval : Time::Span = 1.second)","args_html":"(redis : Redis::Client, interval : Time::Span = <span class=\"n\">1</span>.second)","location":{"filename":"src/scheduler.cr","line_number":11,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L11"},"def":{"name":"new","args":[{"name":"redis","external_name":"redis","restriction":"::Redis::Client"},{"name":"interval","default_value":"1.second","external_name":"interval","restriction":"::Time::Span"}],"visibility":"Public","body":"_ = allocate\n_.initialize(redis, interval)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"check_primary-instance-method","name":"check_primary","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":105,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L105"},"def":{"name":"check_primary","visibility":"Public","body":"!(!(@redis.set(\"conveyor:lock:scheduler\", \"\", ex: {interval * 2, 1.millisecond}.max, nx: true)))"}},{"html_id":"daily(job:Job,*,attime_of_day:String,inlocation:Time::Location=@location):Nil-instance-method","name":"daily","abstract":false,"args":[{"name":"job","external_name":"job","restriction":"Job"},{"name":"","external_name":"","restriction":""},{"name":"time_of_day","external_name":"at","restriction":"String"},{"name":"location","default_value":"@location","external_name":"in","restriction":"Time::Location"}],"args_string":"(job : Job, *, at time_of_day : String, in location : Time::Location = @location) : Nil","args_html":"(job : <a href=\"../Conveyor/Job.html\">Job</a>, *, at time_of_day : String, in location : Time::Location = @location) : Nil","location":{"filename":"src/scheduler.cr","line_number":45,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L45"},"def":{"name":"daily","args":[{"name":"job","external_name":"job","restriction":"Job"},{"name":"","external_name":"","restriction":""},{"name":"time_of_day","external_name":"at","restriction":"String"},{"name":"location","default_value":"@location","external_name":"in","restriction":"Time::Location"}],"splat_index":1,"return_type":"Nil","visibility":"Public","body":"daily(at: time_of_day, in: location) do\n  job\nend"}},{"html_id":"daily(*,attime_of_day:String,inlocation:Time::Location=@location,&block:->Job):Nil-instance-method","name":"daily","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"time_of_day","external_name":"at","restriction":"String"},{"name":"location","default_value":"@location","external_name":"in","restriction":"Time::Location"}],"args_string":"(*, at time_of_day : String, in location : Time::Location = @location, &block :  -> Job) : Nil","args_html":"(*, at time_of_day : String, in location : Time::Location = @location, &block :  -> <a href=\"../Conveyor/Job.html\">Job</a>) : Nil","location":{"filename":"src/scheduler.cr","line_number":56,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L56"},"def":{"name":"daily","args":[{"name":"","external_name":"","restriction":""},{"name":"time_of_day","external_name":"at","restriction":"String"},{"name":"location","default_value":"@location","external_name":"in","restriction":"Time::Location"}],"splat_index":0,"yields":0,"block_arity":0,"block_arg":{"name":"block","external_name":"block","restriction":"(-> Job)"},"return_type":"Nil","visibility":"Public","body":"hours, minutes = (time_of_day.split(':', 2)).map(&.to_i)\nnow = Time.utc\nnext_run = ((now.in(location)).at_beginning_of_day + hours.hours) + minutes.minutes\nif next_run < now\n  next_run = next_run + 1.day\nend\n@jobs << ScheduledJob.new(next_run: next_run, interval: 1.day, &block)\n"}},{"html_id":"every(interval:Time::Span,job:Job,start_in:Time::Span=(rand(interval.total_seconds)).seconds):Nil-instance-method","name":"every","abstract":false,"args":[{"name":"interval","external_name":"interval","restriction":"Time::Span"},{"name":"job","external_name":"job","restriction":"Job"},{"name":"start_in","default_value":"(rand(interval.total_seconds)).seconds","external_name":"start_in","restriction":"Time::Span"}],"args_string":"(interval : Time::Span, job : Job, start_in : Time::Span = (rand(interval.total_seconds)).seconds) : Nil","args_html":"(interval : Time::Span, job : <a href=\"../Conveyor/Job.html\">Job</a>, start_in : Time::Span = (rand(interval.total_seconds)).seconds) : Nil","location":{"filename":"src/scheduler.cr","line_number":72,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L72"},"def":{"name":"every","args":[{"name":"interval","external_name":"interval","restriction":"Time::Span"},{"name":"job","external_name":"job","restriction":"Job"},{"name":"start_in","default_value":"(rand(interval.total_seconds)).seconds","external_name":"start_in","restriction":"Time::Span"}],"return_type":"Nil","visibility":"Public","body":"every(interval, start_in) do\n  job\nend"}},{"html_id":"every(interval:Time::Span,start_in:Time::Span=(rand(interval.total_seconds)).seconds,&block:->Job)-instance-method","name":"every","abstract":false,"args":[{"name":"interval","external_name":"interval","restriction":"Time::Span"},{"name":"start_in","default_value":"(rand(interval.total_seconds)).seconds","external_name":"start_in","restriction":"Time::Span"}],"args_string":"(interval : Time::Span, start_in : Time::Span = (rand(interval.total_seconds)).seconds, &block :  -> Job)","args_html":"(interval : Time::Span, start_in : Time::Span = (rand(interval.total_seconds)).seconds, &block :  -> <a href=\"../Conveyor/Job.html\">Job</a>)","location":{"filename":"src/scheduler.cr","line_number":78,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L78"},"def":{"name":"every","args":[{"name":"interval","external_name":"interval","restriction":"Time::Span"},{"name":"start_in","default_value":"(rand(interval.total_seconds)).seconds","external_name":"start_in","restriction":"Time::Span"}],"yields":0,"block_arity":0,"block_arg":{"name":"block","external_name":"block","restriction":"(-> Job)"},"visibility":"Public","body":"@jobs << ScheduledJob.new(next_run: start_in.from_now, interval: interval, &block)"}},{"html_id":"interval:Time::Span-instance-method","name":"interval","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":6,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L6"},"def":{"name":"interval","return_type":"Time::Span","visibility":"Public","body":"@interval"}},{"html_id":"jobs:Array(Conveyor::Scheduler::ScheduledJob)-instance-method","name":"jobs","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":7,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L7"},"def":{"name":"jobs","visibility":"Public","body":"@jobs"}},{"html_id":"running?:Bool-instance-method","name":"running?","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":5,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L5"},"def":{"name":"running?","visibility":"Public","body":"@running"}},{"html_id":"start:Nil-instance-method","name":"start","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":82,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L82"},"def":{"name":"start","return_type":"Nil","visibility":"Public","body":"@running = true\nspawn do\n  start = Time.monotonic\n  primary = false\n  while running?\n    sleep(interval)\n    start = Time.monotonic\n    if primary\n      @redis.expire(\"conveyor:lock:scheduler\", interval * 2)\n    else\n      if primary = check_primary\n        (Log.for(\"conveyor.scheduler\")).info do\n          \"taking over recurring job scheduling duties\"\n        end\n      end\n    end\n    tick(primary)\n  end\nend\n"}},{"html_id":"stop-instance-method","name":"stop","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":137,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L137"},"def":{"name":"stop","visibility":"Public","body":"@running = false"}},{"html_id":"tick(enqueue:Bool)-instance-method","name":"tick","abstract":false,"args":[{"name":"enqueue","external_name":"enqueue","restriction":"Bool"}],"args_string":"(enqueue : Bool)","args_html":"(enqueue : Bool)","location":{"filename":"src/scheduler.cr","line_number":109,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L109"},"def":{"name":"tick","args":[{"name":"enqueue","external_name":"enqueue","restriction":"Bool"}],"visibility":"Public","body":"now = Time.utc\nhas_run = false\nif enqueue\n  (Log.for(\"conveyor.scheduler\")).trace do\n    \"tick\"\n  end\nend\n@jobs.each do |scheduled_job|\n  if scheduled_job.next_run <= now\n    if enqueue\n      scheduled_job.enqueue\n    end\n    scheduled_job.reschedule\n    has_run = true\n  end\nend\n"}},{"html_id":"time_zone(location:Time::Location)-instance-method","name":"time_zone","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Time::Location"}],"args_string":"(location : Time::Location)","args_html":"(location : Time::Location)","location":{"filename":"src/scheduler.cr","line_number":141,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L141"},"def":{"name":"time_zone","args":[{"name":"location","external_name":"location","restriction":"Time::Location"}],"visibility":"Public","body":"@location = location"}},{"html_id":"weekly(job:Job,*,onweekdays:Array(Time::DayOfWeek),attime_of_day:String,inlocation:Time::Location=@location):Nil-instance-method","name":"weekly","abstract":false,"args":[{"name":"job","external_name":"job","restriction":"Job"},{"name":"","external_name":"","restriction":""},{"name":"weekdays","external_name":"on","restriction":"Array(Time::DayOfWeek)"},{"name":"time_of_day","external_name":"at","restriction":"String"},{"name":"location","default_value":"@location","external_name":"in","restriction":"Time::Location"}],"args_string":"(job : Job, *, on weekdays : Array(Time::DayOfWeek), at time_of_day : String, in location : Time::Location = @location) : Nil","args_html":"(job : <a href=\"../Conveyor/Job.html\">Job</a>, *, on weekdays : Array(Time::DayOfWeek), at time_of_day : String, in location : Time::Location = @location) : Nil","location":{"filename":"src/scheduler.cr","line_number":14,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L14"},"def":{"name":"weekly","args":[{"name":"job","external_name":"job","restriction":"Job"},{"name":"","external_name":"","restriction":""},{"name":"weekdays","external_name":"on","restriction":"Array(Time::DayOfWeek)"},{"name":"time_of_day","external_name":"at","restriction":"String"},{"name":"location","default_value":"@location","external_name":"in","restriction":"Time::Location"}],"splat_index":1,"return_type":"Nil","visibility":"Public","body":"weekly(on: weekdays, at: time_of_day, in: location) do\n  job\nend"}},{"html_id":"weekly(*,onweekdays:Array(Time::DayOfWeek),attime_of_day:String,inlocation:Time::Location=@location,&block:->Job):Nil-instance-method","name":"weekly","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"weekdays","external_name":"on","restriction":"Array(Time::DayOfWeek)"},{"name":"time_of_day","external_name":"at","restriction":"String"},{"name":"location","default_value":"@location","external_name":"in","restriction":"Time::Location"}],"args_string":"(*, on weekdays : Array(Time::DayOfWeek), at time_of_day : String, in location : Time::Location = @location, &block :  -> Job) : Nil","args_html":"(*, on weekdays : Array(Time::DayOfWeek), at time_of_day : String, in location : Time::Location = @location, &block :  -> <a href=\"../Conveyor/Job.html\">Job</a>) : Nil","location":{"filename":"src/scheduler.cr","line_number":26,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L26"},"def":{"name":"weekly","args":[{"name":"","external_name":"","restriction":""},{"name":"weekdays","external_name":"on","restriction":"Array(Time::DayOfWeek)"},{"name":"time_of_day","external_name":"at","restriction":"String"},{"name":"location","default_value":"@location","external_name":"in","restriction":"Time::Location"}],"splat_index":0,"yields":0,"block_arity":0,"block_arg":{"name":"block","external_name":"block","restriction":"(-> Job)"},"return_type":"Nil","visibility":"Public","body":"hours, minutes = (time_of_day.split(':', 2)).map(&.to_i)\nnow = Time.utc\nweekdays.each do |day|\n  next_run = (((now.in(location)).at_beginning_of_week + day.value.days) + hours.hours) + minutes.minutes\n  if next_run < now\n    next_run = next_run + 1.week\n  end\n  @jobs << ScheduledJob.new(next_run: next_run, interval: 1.week, &block)\nend\n"}}],"types":[{"html_id":"conveyor/Conveyor/Scheduler/ScheduledJob","path":"Conveyor/Scheduler/ScheduledJob.html","kind":"class","full_name":"Conveyor::Scheduler::ScheduledJob","name":"ScheduledJob","abstract":false,"superclass":{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/scheduler.cr","line_number":144,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L144"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor/Scheduler","kind":"class","full_name":"Conveyor::Scheduler","name":"Scheduler"},"constructors":[{"html_id":"new(next_run:Time,interval:Time::Span,&job:->Job)-class-method","name":"new","abstract":false,"args":[{"name":"next_run","external_name":"next_run","restriction":"::Time"},{"name":"interval","external_name":"interval","restriction":"::Time::Span"}],"args_string":"(next_run : Time, interval : Time::Span, &job :  -> Job)","args_html":"(next_run : Time, interval : Time::Span, &job :  -> <a href=\"../../Conveyor/Job.html\">Job</a>)","location":{"filename":"src/scheduler.cr","line_number":148,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L148"},"def":{"name":"new","args":[{"name":"next_run","external_name":"next_run","restriction":"::Time"},{"name":"interval","external_name":"interval","restriction":"::Time::Span"}],"yields":0,"block_arity":0,"block_arg":{"name":"job","external_name":"job","restriction":"(-> Job)"},"visibility":"Public","body":"_ = allocate\n_.initialize(next_run, interval, &job) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"enqueue-instance-method","name":"enqueue","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":155,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L155"},"def":{"name":"enqueue","visibility":"Public","body":"job.enqueue"}},{"html_id":"interval:Time::Span-instance-method","name":"interval","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":146,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L146"},"def":{"name":"interval","return_type":"Time::Span","visibility":"Public","body":"@interval"}},{"html_id":"job-instance-method","name":"job","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":151,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L151"},"def":{"name":"job","visibility":"Public","body":"@job.call"}},{"html_id":"next_run:Time-instance-method","name":"next_run","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":145,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L145"},"def":{"name":"next_run","return_type":"Time","visibility":"Public","body":"@next_run"}},{"html_id":"reschedule(atnext_run:Time):Nil-instance-method","name":"reschedule","abstract":false,"args":[{"name":"next_run","external_name":"at","restriction":"::Time"}],"args_string":"(at next_run : Time) : Nil","args_html":"(at next_run : Time) : Nil","location":{"filename":"src/scheduler.cr","line_number":163,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L163"},"def":{"name":"reschedule","args":[{"name":"next_run","external_name":"at","restriction":"::Time"}],"return_type":"Nil","visibility":"Public","body":"@next_run = next_run"}},{"html_id":"reschedule:Nil-instance-method","name":"reschedule","abstract":false,"location":{"filename":"src/scheduler.cr","line_number":159,"url":"https://github.com/jgaskins/conveyor/blob/main/src/scheduler.cr#L159"},"def":{"name":"reschedule","return_type":"Nil","visibility":"Public","body":"reschedule(at: next_run + interval)"}}]}]},{"html_id":"conveyor/Conveyor/UnknownJobType","path":"Conveyor/UnknownJobType.html","kind":"class","full_name":"Conveyor::UnknownJobType","name":"UnknownJobType","abstract":false,"superclass":{"html_id":"conveyor/Conveyor/Exception","kind":"class","full_name":"Conveyor::Exception","name":"Exception"},"ancestors":[{"html_id":"conveyor/Conveyor/Exception","kind":"class","full_name":"Conveyor::Exception","name":"Exception"},{"html_id":"conveyor/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/errors.cr","line_number":9,"url":"https://github.com/jgaskins/conveyor/blob/main/src/errors.cr#L9"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"}},{"html_id":"conveyor/Conveyor/Web","path":"Conveyor/Web.html","kind":"class","full_name":"Conveyor::Web","name":"Web","abstract":false,"superclass":{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"conveyor/Armature/Route","kind":"module","full_name":"Armature::Route","name":"Route"},{"html_id":"conveyor/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"conveyor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/web.cr","line_number":4,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L4"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"conveyor/Armature/Route","kind":"module","full_name":"Armature::Route","name":"Route"},{"html_id":"conveyor/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"namespace":{"html_id":"conveyor/Conveyor","kind":"module","full_name":"Conveyor","name":"Conveyor"},"constructors":[{"html_id":"new(path:String=\"/conveyor\")-class-method","name":"new","abstract":false,"args":[{"name":"path","default_value":"\"/conveyor\"","external_name":"path","restriction":"::String"}],"args_string":"(path : String = \"/conveyor\")","args_html":"(path : String = <span class=\"s\">&quot;/conveyor&quot;</span>)","location":{"filename":"src/web.cr","line_number":10,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L10"},"def":{"name":"new","args":[{"name":"path","default_value":"\"/conveyor\"","external_name":"path","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"call(context,render_app_shell=true)-instance-method","name":"call","abstract":false,"args":[{"name":"context","external_name":"context","restriction":""},{"name":"render_app_shell","default_value":"true","external_name":"render_app_shell","restriction":""}],"args_string":"(context, render_app_shell = true)","args_html":"(context, render_app_shell = <span class=\"n\">true</span>)","location":{"filename":"src/web.cr","line_number":13,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L13"},"def":{"name":"call","args":[{"name":"context","external_name":"context","restriction":""},{"name":"render_app_shell","default_value":"true","external_name":"render_app_shell","restriction":""}],"visibility":"Public","body":"route(context) do |r, response, session|\n  response.headers[\"content-type\"] = \"text/html\"\n  if render_app_shell\n    render(\"header\")\n  end\n  r.root do\n    r.get do\n      job_keys = [] of String\n      queue_keys = [] of String\n      belt_keys = [] of String\n      redis.scan_each(match: \"conveyor:*\", count: 1000) do |key|\n        pp(key: key)\n        case key\n        when .starts_with?(\"conveyor:job:\")\n          job_keys << key\n        when .starts_with?(\"conveyor:queue:\")\n          queue_keys << key\n        when .starts_with?(\"conveyor:belt:\")\n          belt_keys << key\n        end\n      end\n      queue_entries = redis.pipeline do |pipe|\n        queue_keys.each do |key|\n          pipe.lrange(key, \"0\", \"-1\")\n        end\n      end\n      queues = queue_keys.map_with_index do |key, index|\n        {key.lchop(\"conveyor:queue:\"), queue_entries[index].as(Array)}\n      end.to_h\n      belt_ids = belt_keys.map(&.lchop(\"conveyor:belt:\")).to_set\n      all_jobs = redis.pipeline do |pipe|\n        job_keys.each do |key|\n          pipe.hgetall(key)\n        end\n      end.compact_map do |data|\n        data = data.as(Array)\n        if data.empty?\n        else\n          JobData.new(Redis.to_hash(data))\n        end\n      end.to_set\n      jobs_by_queue = all_jobs.group_by(&.queue)\n      enqueued_jobs = all_jobs.select do |job|\n        queues[job.queue]?.try(&.includes?(job.id))\n      end.to_set\n      scheduled_jobs = all_jobs.select do |job|\n        scheduled_job_ids.includes?(job.id)\n      end.to_set\n      pending_jobs = all_jobs.select do |job|\n        job.pending? && (belt_ids.includes?(job.belt))\n      end.to_set\n      orphaned_jobs = ((all_jobs - enqueued_jobs) - scheduled_jobs) - pending_jobs\n      pp(all_jobs: all_jobs.map(&.id).sort, enqueued: enqueued_jobs.map(&.id).sort, scheduled: scheduled_jobs.map(&.id).sort, pending: pending_jobs.map(&.id).sort, orphaned: orphaned_jobs.map(&.id).sort)\n      render(\"app\")\n    end\n  end\n  r.on(\"jobs\") do\n    r.on(id: UUID) do |id|\n      r.delete do\n        redis.unlink(\"conveyor:job:#{id}\")\n        response.redirect(@path)\n      end\n    end\n  end\n  r.on(\"scheduled\") do\n    r.post(\"enqueue\") do\n      jobs = redis.pipeline do |pipe|\n        scheduled_job_ids.each do |id|\n          pipe.hgetall(\"conveyor:job:#{id}\")\n        end\n      end.compact_map do |raw|\n        data = raw.as(Array)\n        if data.empty?\n        else\n          JobData.new(Redis.to_hash(data))\n        end\n      end\n      jobs_by_queue = jobs.group_by(&.queue)\n      redis.pipeline do |pipe|\n        jobs_by_queue.each do |queue, jobs|\n          pipe.lpush(\"conveyor:queue:#{queue}\", jobs.map(&.id))\n        end\n      end\n    end\n  end\n  render(\"footer\")\nend"}},{"html_id":"path:String-instance-method","name":"path","abstract":false,"location":{"filename":"src/web.cr","line_number":8,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L8"},"def":{"name":"path","return_type":"String","visibility":"Public","body":"@path"}},{"html_id":"redis(*args,**options)-instance-method","name":"redis","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/web.cr","line_number":131,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L131"},"def":{"name":"redis","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"CONFIG.redis(*args, **options)"}},{"html_id":"redis(*args,**options,&)-instance-method","name":"redis","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/web.cr","line_number":131,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L131"},"def":{"name":"redis","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"CONFIG.redis(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"scheduled_job_ids-instance-method","name":"scheduled_job_ids","abstract":false,"location":{"filename":"src/web.cr","line_number":123,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L123"},"def":{"name":"scheduled_job_ids","visibility":"Public","body":"(redis.zrange(\"conveyor:scheduled\", \"0\", \"-1\")).as(Array)"}}],"macros":[{"html_id":"render(template,toio=nil)-macro","name":"render","abstract":false,"args":[{"name":"template","external_name":"template","restriction":""},{"name":"io","default_value":"nil","external_name":"to","restriction":""}],"args_string":"(template, to io = nil)","args_html":"(template, to io = <span class=\"n\">nil</span>)","location":{"filename":"src/web.cr","line_number":127,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L127"},"def":{"name":"render","args":[{"name":"template","external_name":"template","restriction":""},{"name":"io","default_value":"nil","external_name":"to","restriction":""}],"visibility":"Public","body":"    Armature::Template.embed \"lib/conveyor/web/templates/\n{{ template.id }}\n.ecr\", \n{{ io || \"response\".id }}\n\n  \n"}}],"types":[{"html_id":"conveyor/Conveyor/Web/Component","path":"Conveyor/Web/Component.html","kind":"struct","full_name":"Conveyor::Web::Component","name":"Component","abstract":true,"superclass":{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"conveyor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/web.cr","line_number":133,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L133"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"conveyor/Conveyor/Web/Form","kind":"struct","full_name":"Conveyor::Web::Form(T)","name":"Form"},{"html_id":"conveyor/Conveyor/Web/JobsTable","kind":"struct","full_name":"Conveyor::Web::JobsTable(T)","name":"JobsTable"}],"namespace":{"html_id":"conveyor/Conveyor/Web","kind":"class","full_name":"Conveyor::Web","name":"Web"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/web.cr","line_number":133,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L133"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/web.cr","line_number":133,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L133"},"def":{"name":"initialize","visibility":"Public","body":""}}],"macros":[{"html_id":"def_to_s(template)-macro","name":"def_to_s","abstract":false,"args":[{"name":"template","external_name":"template","restriction":""}],"args_string":"(template)","args_html":"(template)","location":{"filename":"src/web.cr","line_number":134,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L134"},"def":{"name":"def_to_s","args":[{"name":"template","external_name":"template","restriction":""}],"visibility":"Public","body":"      def to_s(io) : Nil\n        Conveyor::Web.render \n{{ template }}\n, to: io\n      \nend\n    \n"}}]},{"html_id":"conveyor/Conveyor/Web/Form","path":"Conveyor/Web/Form.html","kind":"struct","full_name":"Conveyor::Web::Form(T)","name":"Form","abstract":false,"superclass":{"html_id":"conveyor/Conveyor/Web/Component","kind":"struct","full_name":"Conveyor::Web::Component","name":"Component"},"ancestors":[{"html_id":"conveyor/Conveyor/Web/Component","kind":"struct","full_name":"Conveyor::Web::Component","name":"Component"},{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"conveyor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/web.cr","line_number":145,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L145"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor/Web","kind":"class","full_name":"Conveyor::Web","name":"Web"},"constructors":[{"html_id":"new(method:String,action:String,session:T,&block)-class-method","name":"new","abstract":false,"args":[{"name":"method","external_name":"method","restriction":"::String"},{"name":"action","external_name":"action","restriction":"::String"},{"name":"session","external_name":"session","restriction":"T"}],"args_string":"(method : String, action : String, session : T, &block)","args_html":"(method : String, action : String, session : T, &block)","location":{"filename":"src/web.cr","line_number":151,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L151"},"def":{"name":"new","args":[{"name":"method","external_name":"method","restriction":"::String"},{"name":"action","external_name":"action","restriction":"::String"},{"name":"session","external_name":"session","restriction":"T"}],"yields":0,"block_arity":0,"block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"_ = Form(T).allocate\n_.initialize(method, action, session, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"action:String-instance-method","name":"action","abstract":false,"location":{"filename":"src/web.cr","line_number":147,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L147"},"def":{"name":"action","return_type":"String","visibility":"Public","body":"@action"}},{"html_id":"method:String-instance-method","name":"method","abstract":false,"location":{"filename":"src/web.cr","line_number":146,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L146"},"def":{"name":"method","return_type":"String","visibility":"Public","body":"@method"}},{"html_id":"session:T-instance-method","name":"session","abstract":false,"location":{"filename":"src/web.cr","line_number":148,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L148"},"def":{"name":"session","return_type":"T","visibility":"Public","body":"@session"}},{"html_id":"to_s(io):Nil-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io) : Nil","args_html":"(io) : Nil","location":{"filename":"src/web.cr","line_number":154,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L154"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"return_type":"Nil","visibility":"Public","body":"Conveyor::Web.render(\"form\", to: io)"}}]},{"html_id":"conveyor/Conveyor/Web/JobsTable","path":"Conveyor/Web/JobsTable.html","kind":"struct","full_name":"Conveyor::Web::JobsTable(T)","name":"JobsTable","abstract":false,"superclass":{"html_id":"conveyor/Conveyor/Web/Component","kind":"struct","full_name":"Conveyor::Web::Component","name":"Component"},"ancestors":[{"html_id":"conveyor/Conveyor/Web/Component","kind":"struct","full_name":"Conveyor::Web::Component","name":"Component"},{"html_id":"conveyor/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"conveyor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"conveyor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/web.cr","line_number":141,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L141"}],"repository_name":"conveyor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"conveyor/Conveyor/Web","kind":"class","full_name":"Conveyor::Web","name":"Web"},"constructors":[{"html_id":"new(base_path:String,jobs:Enumerable(JobData),session:T)-class-method","name":"new","abstract":false,"args":[{"name":"base_path","external_name":"base_path","restriction":"String"},{"name":"jobs","external_name":"jobs","restriction":"Enumerable(JobData)"},{"name":"session","external_name":"session","restriction":"T"}],"args_string":"(base_path : String, jobs : Enumerable(JobData), session : T)","args_html":"(base_path : String, jobs : Enumerable(<a href=\"../../Conveyor/JobData.html\">JobData</a>), session : T)","location":{"filename":"src/web.cr","line_number":141,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L141"},"def":{"name":"new","args":[{"name":"base_path","external_name":"base_path","restriction":"String"},{"name":"jobs","external_name":"jobs","restriction":"Enumerable(JobData)"},{"name":"session","external_name":"session","restriction":"T"}],"visibility":"Public","body":"_ = JobsTable(T).allocate\n_.initialize(base_path, jobs, session)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"base_path:String-instance-method","name":"base_path","abstract":false,"def":{"name":"base_path","return_type":"String","visibility":"Public","body":"@base_path"}},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/web.cr","line_number":141,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L141"},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@base_path.clone, @jobs.clone, @session.clone)"}},{"html_id":"copy_with(base_path_base_path=@base_path,jobs_jobs=@jobs,session_session=@session)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_base_path","default_value":"@base_path","external_name":"base_path","restriction":""},{"name":"_jobs","default_value":"@jobs","external_name":"jobs","restriction":""},{"name":"_session","default_value":"@session","external_name":"session","restriction":""}],"args_string":"(base_path _base_path = @base_path, jobs _jobs = @jobs, session _session = @session)","args_html":"(base_path _base_path = @base_path, jobs _jobs = @jobs, session _session = @session)","location":{"filename":"src/web.cr","line_number":141,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L141"},"def":{"name":"copy_with","args":[{"name":"_base_path","default_value":"@base_path","external_name":"base_path","restriction":""},{"name":"_jobs","default_value":"@jobs","external_name":"jobs","restriction":""},{"name":"_session","default_value":"@session","external_name":"session","restriction":""}],"visibility":"Public","body":"self.class.new(_base_path, _jobs, _session)"}},{"html_id":"jobs:Enumerable(JobData)-instance-method","name":"jobs","abstract":false,"def":{"name":"jobs","return_type":"Enumerable(JobData)","visibility":"Public","body":"@jobs"}},{"html_id":"session:T-instance-method","name":"session","abstract":false,"def":{"name":"session","return_type":"T","visibility":"Public","body":"@session"}},{"html_id":"to_s(io):Nil-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io) : Nil","args_html":"(io) : Nil","location":{"filename":"src/web.cr","line_number":142,"url":"https://github.com/jgaskins/conveyor/blob/main/src/web.cr#L142"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"return_type":"Nil","visibility":"Public","body":"Conveyor::Web.render(\"jobs_table\", to: io)"}}]}]}]}]}}